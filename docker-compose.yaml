version: '3.9'

services:
  postgres:
    image: pgvector/pgvector:pg15
    container_name: hpulse-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./ops/db/init:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 20
    ports:
      - "5432:5432"

  redis:
    image: redis:7
    container_name: hpulse-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 20

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: hpulse-backend
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - .env
    environment:
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: ${REDIS_URL}
      JWT_SECRET: ${JWT_SECRET}
      JWT_ALGORITHM: ${JWT_ALGORITHM}
      JWT_EXPIRES_MINUTES: ${JWT_EXPIRES_MINUTES}
      RATE_LIMIT_PER_MINUTE: ${RATE_LIMIT_PER_MINUTE}
      CORS_ALLOW_ORIGINS: ${CORS_ALLOW_ORIGINS}
      OTEL_EXPORTER_OTLP_ENDPOINT: ${OTEL_EXPORTER_OTLP_ENDPOINT}
      OTEL_SERVICE_NAME: ${OTEL_SERVICE_NAME}
      PROMETHEUS_METRICS_PORT: ${PROMETHEUS_METRICS_PORT}
      ENV: ${ENV}
    ports:
      - "8000:8000"
    restart: unless-stopped

  worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: hpulse-worker
    command: ["bash", "-lc", "opentelemetry-instrument celery -A app.celery_app:celery_app worker --loglevel=info"]
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - .env
    environment:
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: ${REDIS_URL}
      OTEL_EXPORTER_OTLP_ENDPOINT: ${OTEL_EXPORTER_OTLP_ENDPOINT}
      OTEL_SERVICE_NAME: hpulse-worker
      ENV: ${ENV}
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: hpulse-frontend
    depends_on:
      - backend
    env_file:
      - .env
    environment:
      NEXT_PUBLIC_API_BASE_URL: ${NEXT_PUBLIC_API_BASE_URL}
    ports:
      - "3000:3000"
    restart: unless-stopped

volumes:
  pgdata: